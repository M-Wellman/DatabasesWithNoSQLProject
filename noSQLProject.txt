
Insert Data:
db.movies.insertMany({title: "Fight Club", writer: "Chuck Palahniuk", year: 1999, actor: ["Brad Pitt", "Edward Norton"]},
{title: "Pulp Fiction", writer: "Quentin Tarantino", year: 1994, actor: ["John Travolta", "Uma Thurman"]},
{title: "Inglorious Basterds", writer: "Quentin Tarantino", year: 2009, actor: ["Brad Pitt", "Diane Kruger", "Eli Roth"]},
{title: "The Hobbit: An Unexpected Journey", writer: "J.R.R. Tolkein", year: 2012, franchise: "The Hobbit"}, 
{title: "The Hobbit: The Desolation of Smaug", writer: "J.R.R. Tolkein", year: 2013, franchise: "The Hobbit", 
{title: "The Hobbit: The Battle of the Five Armies", writer: "J.R.R. Tolkein", year: 2012, franchise: " The Hobbit", synopsis: "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling in",
{title: "Avatar"})

Queries:
Get all documents:
	db.movies.find({})
Get all documents with writer set to "Quentin Tarantino"
	db.movies.find({"writer": /Quentin Tarantino/)
Get all documents where actors include "Brad Pitt"
	db.movies.find({"actor": {$in: ["Brad Pitt"]}})
Get all documents with franchise set to "The Hobbit"
	db.movies.find({"franchise": {$eq: "The Hobbit"}})
Get all movies released in the 90s
	db.movies.find({"year": {"$lt": 2000}})
Get all movies released before the year 2000 or after 2010
	db.movies.find({"$or": [{"year": {"$lt": 2000}}, {"year": {"$gt": 2010}}]})


Update Docs:
Add a synopsis to "The Hobbit: An Unexpected Journey" :
	db.movies.updateOne({"title": "The Hobbit: An Unexpected Journey"}, {$set: {"synopsis": "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug."}}, {upsert: true})

Add a synopsis to "The Hobbit: The Desolation of Smaug" :
	db.movies.updateOne({"title": "The Hobbit: The Desolation of Smaug"}, {$set: {"synopsis": "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."}}, {upsert: true})

Add an actor named "Samuel L. Jackson" to the movie "Pulp Fiction"
	db.movies.updateOne({"title": "Pulp Fiction"}, {$push: {"actor": "Samuel L. Jackson"}})


Text Search: //incorrect - searching how to research substrings
Find all movies that have a synopsis that contains the word "Bilbo":
	db.movies.find({"synopsis": /Bilbo/})
Find all movies that have a synopsis that contains the word "Gandalf":
	db.movies.find({"synopsis": /Gandalf/})
Find all movies that have a synopsis that contains the word "Bilbo" and not the word "Gandalf":
	db.movies.find({$and: [{"synopsis": /Bilbo/}, {$not: {"synopsis": /Gandalf/}}]}) -- incorrect
Find all movies that have a synopsis that contains the word "dwarves" or "hobbit":
	db.movies.find({$or: [{"synopsis": /dwarves/}, {"synopsis": /hobbit/}]})
Find all movies that have a synopsis that contains the word "gold" and "dragon":
	db.movies.find({$and: [{"synopsis": /gold/}, {"synopsis": /dragon/}]})


Delete Documents:
Delete the movie "Avatar":
	db.movies.deleteOne({title: "Avatar"})


Relationships:
Insert the relationships:
	db.users.insertOne({username: "GoodGuyGreg", first_name: "Good guy", last_name: "Greg"})
	db.users.insertOne({username: "BadGuyBob", first_name: "Bad guy", Last_name: "Bob"})


Insert the documents into a posts collection:
	db.posts.insertOne({username: "GoodGuyGreg"},id: "1", title: "Passes out at party", body: "Wakes up early and cleans house"})
	db.posts.insertOne({username: "GoodGuyGreg"}, id: "2", title: "Steals your identity", body: "Raises your credit score"})
	db.posts.insertOne({username: "GoodGuyGreg", id: "3", title: "Reports a bug in your code", body: "Sends you a Pull request"})
	db.posts.insertOne({username: "BadGuyBob", id: "4", title: "Borrows something", body: "Sells it"})
	db.posts.insertOne({username: "BadGuyBob", id: "5", title: "Borrows everything", body: "The end"})
	db.posts.insertOne({username: "BadGuyBob", id: "6", title: "Forks your repo on github", body: "Sets to private"})


Insert the documents into a comments collection:
	db.comments.insertOne({username: "GoodGuyGreg", comment: "Hope you got a good deal!", post: "4"})
	db.comments.insertOne({username: "GoodGuyGreg", comment: "What's mine is yours!", post: "5"})
	db.comments.insertOne({username: "GoodGuyGreg", comment: "Don't violate the leasing agreement!", post: "6"})
	db.comments.insertOne({username: "BadGuyBob", comment: "It still isn't clean", post: "1"})
	db.comments.insertOne({username: "BadGuyBob", comment: "Denied your PR cause I found a hack", post: "3"})

Querying Related fields:
Find all users
	db.users.find({})
Find all posts
	db.posts.find({})
Find all posts that was authored by "GoodGuyGreg"
	db.posts.find({"username": /GoodGuyGreg/})
Find all posts that was authored by "BadGuyBob"
	db.posts.find({"username": /BadGuyBob/})
Find all comments
	db.comments.find({})
Find all comments that was authored by "GoodGuyGreg"
	db.comments.find({"username": /GoodGuyGreg/})
Find all comments that was authored by ""
	db.comments.find({"username": /""/}) --incorrect
Find all comments belonging to the post "Reports a bug in your code"
	db.comments.find({"post": 3}) -- incorrect
